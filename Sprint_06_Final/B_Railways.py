"""
В стране X есть n городов, которым присвоены номера от 1 до n.
Столица страны имеет номер n. Между городами проложены железные дороги.
Однако дороги могут быть двух типов по ширине полотна. Любой поезд может
ездить только по одному типу полотна. Условно один тип дорог помечают как R,
а другой как B. То есть если маршрут от одного города до другого имеет как
дороги типа R, так и дороги типа B, то ни один поезд не сможет по этому
маршруту проехать. От одного города до другого можно проехать только по
маршруту, состоящему исключительно из дорог типа R или только из дорог типа B.
Но это ещё не всё. По дорогам страны X можно двигаться только от города с
меньшим номером к городу с большим номером. Это объясняет большой приток
жителей в столицу, у которой номер n.
Карта железных дорог называется оптимальной, если не существует пары
городов A и B такой, что от A до B можно добраться как по дорогам типа R,
так и по дорогам типа B. Иными словами, для любой пары городов верно, что
от города с меньшим номером до города с бОльшим номером можно добраться
по дорогам только какого-то одного типа или же что маршрут построить вообще
нельзя.
Выясните, является ли данная вам карта оптимальной.

Input format
В первой строке дано число n (1 ≤ n ≤ 5000) — количество городов в стране.
Далее задана карта железных дорог в следующем формате.
Карта задана n-1 строкой.
В i-й строке описаны дороги из города i в города i+1, i+2, ..., n. В строке
записано n - i символов, каждый из которых либо R, либо B. Если j-й символ
строки i равен «B», то из города i в город i + j идет дорога типа «B».
Аналогично для типа «R».

Output format
Выведите «YES», если карта оптимальна, и «NO» в противном случае.
"""
"""
Алгоритм работы:
1. Из исходных данных строим ОРИЕНТИРОВАННЫЙ граф: ребра 'R' идут от меньшей 
   вершины к большей, ребра 'B' - от большей к меньшей.
2. С помощью алгоритма поиска в глубину определяем, есть ли в графе циклы. 
   Если есть, то это значит, что из одного города в другой можно добраться 
   путями разного цвета и карта не оптимальна. Если циклов нет, то карта 
   оптимальна.   
"""

def DFS(startv, nodes, colors):
    stack = []
    stack.append(startv)
    res = True
    while len(stack) > 0 and res:
        v = stack.pop()
        if colors[v] == 0:
            if nodes[v] is not None:
                colors[v] = 1
                stack.append(v)
                for i in range(len(nodes[v])):
                    if colors[nodes[v][i]] == 0:
                        stack.append(nodes[v][i])
                    elif colors[nodes[v][i]] == 1:
                        res = False
            else:
                colors[v] = 2
        else:
            if colors[v] == 1:
                colors[v] = 2
    return res
    pass


def main():
    n = int(input())
    vertex = [None] * (n + 1)
    colors = [0] * (n + 1)
    for i in range(n - 1):
        s = input()
        startv = i + 1
        for j in range(len(s)):
            endv = startv + j + 1
            if s[j] == 'R' or s[j] == 'r':
                if vertex[startv] is None:
                    vertex[startv] = []
                vertex[startv].append(endv)
            if s[j] == 'B' or s[j] == 'b':
                if vertex[endv] is None:
                    vertex[endv] = []
                vertex[endv].append(startv)

    for i in range(1, n + 1):
        if colors[i] == 0:
            if not DFS(i, vertex, colors):
                print('NO')
                break
    else:
        print('YES')
    pass


if __name__ == '__main__':
    main()