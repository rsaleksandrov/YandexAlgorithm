"""
Мама Васи хочет знать, что сын планирует делать и когда. Помогите ей:
напишите функцию solution, определяющую индекс первого вхождения передаваемого
ей на вход значения в связном списке, если значение присутствует.
Внимание: в этой задаче не нужно считывать входные данные. Нужно написать
только функцию, которая принимает на вход голову списка и искомый элемент,
а возвращает целое число — индекс найденного элемента или -1.
Ниже дано описание структуры, которая задаёт вершину списка.
Мы рекомендуем воспользоваться заготовками кода для данной задачи,
расположенными по ссылке.
Решение надо отправлять только в виде файла с расширением, которое
соответствует вашему языку. Иначе даже корректно написанное решение
не пройдет тесты.

Формат ввода
Функция на вход принимает голову односвязного списка и элемент, который нужно
найти. Длина списка не превосходит 10000 элементов. Список не бывает пустым.
Следуйте следующим правилам при отправке решений:

Нужно выбирать компилятор Make.
Решение нужно отправлять в виде файла с расширением соответствующем вашему
языку программирования.
Для Java файл должен называться Solution.java, для C# – Solution.cs
Для остальных языков программирования это имя использовать нельзя
(имя «solution» тоже).
Для Go укажите package main.
Python:
Если вы пишете на Python, функция должна называться solution и принимать на
вход вершину node и элемент, который надо найти.
Узел списка описывается следующим классом:

class Node:
    def __init__(self, value, next_item=None):
        self.value = value
        self.next_item = next_item
Сигнатура функции: solution(node, elem) -> int.
"""


# Comment it before submytting
# class Node:
#     def __init__(self, value, next_item=None):
#         self.value = value
#         self.next_item = next_item


def solution(node, elem) -> int:
    i = 0
    isFound = False
    while node is not None:
        if node.value == elem:
            isFound = True
            break
        node = node.next_item
        i += 1
    if isFound:
        return i
    else:
        return -1


if __name__ == "__main__":
    node3 = Node("node3", None)
    node2 = Node("node2", node3)
    node1 = Node("node1", node2)
    node0 = Node("node0", node1)
    idx = solution(node0, "node5")
    print(idx)
