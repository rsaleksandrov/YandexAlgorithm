"""
ID 69072734

Описание алгоритма:
За основу взят алгоритм https://ru.wikipedia.org/wiki/Расстояние_Левенштейна
Формируем вспомогательную таблицу dp по следующему правилу:
         |j, если i=0
         |i, если j=0
dp[i][j]=|   | dp[i-1][j] + 1
         |min| dp[i][j-1] + 1         если i>0 и j>0
         |   | dp[i-1][j-1] + (0 если s1[j-1]==s2[i-1], иначе 1)

Ответ на задачу будет находиться в dp[N][M], где N - длина строки s2, M - длина
строки s1.

Вычислительная сложность:
1. Формирование массива dp - O(N*M)
2. Заполнение массива dp - O(N*M)
3. Общая вычислительная сложность - O(2*N*M)

Пространственная сложность:
1. Хранение исходных строк - O(N+M)
2. Массив хранения промежуточных результатов - O(2*M)
3. Общая пространственная сложность - O((N+M)+(2*M))
"""


def main3():
    s1 = input()
    s2 = input()
    rows = len(s2) + 1
    cols = len(s1) + 1
    cur = []
    for i in range(1, rows):
        if i == 1:
            prev = [j for j in range(cols)]
        else:
            prev = cur
        cur = [i] + [0] * (cols - 1)
        for j in range(1, cols):
            d1 = prev[j] + 1
            d2 = cur[j - 1] + 1
            d3 = prev[j - 1] + (0 if s1[j - 1] == s2[i - 1] else 1)
            cur[j] = min([d1, d2, d3])

    print(cur[-1])


if __name__ == '__main__':
    main3()
